from aiogram import types
from misc import dp, bot
import sqlite3
from aiogram.utils.exceptions import BotBlocked, ChatNotFound
import asyncio

from aiogram.dispatcher import FSMContext
from .sqlit import info_members,add_black,cheak_black
from aiogram.dispatcher.filters.state import State, StatesGroup


ADMIN_ID_1 = 494588959 #C–∞–Ω—è
ADMIN_ID_2 = 44520977 #–ö–æ–ª—è
ADMIN_ID_3 = 941730379 #–î–∂–µ–π—Å–æ–Ω
ADMIN_ID_4 = 678623761 # –ë–µ–∫–∏—Ä


ADMIN_ID =[ADMIN_ID_1,ADMIN_ID_2,ADMIN_ID_3,ADMIN_ID_4,1079844264]

text_stop = """–ê—è—è–π —è —Å–º–æ—Ç—Ä—é, –∫—Ç–æ-—Ç–æ —Ä–µ—à–∏–ª
–ø–æ—à–∞–ª–∏—Ç—å üòè

–°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ, –∞ –ø–æ—Ç–æ–º –Ω–∞–∂–∏–º–∞–πüôèüôÉ"""

class reg1(StatesGroup):
    name1 = State()
    fname1 = State()

class st_reg(StatesGroup):
    st_name = State()
    st_fname = State()
    step_q = State()
    step_regbutton = State()

class black_dodik(StatesGroup):
    name1 = State()
    fname1 = State()

@dp.message_handler(commands=['admin'],state='*')
async def admin_ka(message: types.Message,state: FSMContext):
    await state.finish()
    id = message.from_user.id
    if id in ADMIN_ID:
        markup = types.InlineKeyboardMarkup()
        bat_a = types.InlineKeyboardButton(text='–¢—Ä–∞—Ñ–∏–∫', callback_data='list_members')
        bat_c = types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞', callback_data='write_message')
        bat_b = types.InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å –±–∞–∑—É', callback_data='baza')

        markup.add(bat_a)
        markup.add(bat_c)
        markup.add(bat_b)


        await bot.send_message(message.chat.id,'–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å',reply_markup=markup)






@dp.callback_query_handler(text='list_members')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –¢–†–ê–§–ò–ö–ê
async def cheack_trafik(call: types.callback_query):
    if call.message.chat.id in ADMIN_ID:
        a = (info_members()) #–ö–û–õ–ò–ß–ï–°–¢–í–û –í–°–ï–• –ß–ï–õ–û–í
        await bot.send_message(call.message.chat.id, f'0 [–≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π]: {a[0] - 7272}\n'
                                                     f'<b>1 [–ü–æ–≥–Ω–∞–ª–∏ –¥–∞–ª—å—à–µ]: {a[1] + a[2] +a[3]+ a[4] +a[5] + a[6] + a[7] +a [8]}\n'
                                                     f'2 [–î–∞–≤–∞–π]: {a[2] +a[3]+ a[4] +a[5] + a[6] + a[7] +a [8]}\n'
                                                     f'3 [–ß—Ç–æ –∑–∞ –∏–¥–µ—è]: {a[3]+ a[4] +a[5] + a[6] + a[7] +a [8]}\n'
                                                     f'4 [–ü–æ–≥–Ω–∞–ª–∏, –≥–æ–ª–æ—Å–æ–≤–æ–π]: {a[4] +a[5] + a[6] + a[7] +a [8]}\n'
                                                     f'5 [–Ω–∞–∂–∞–ª–∏ –Ω–∞ –≤–∏–¥–æ—Å üòé–æ–ø –æ–øüòé]: {a[5] + a[6] + a[7] +a [8]}\n'
                                                     f'6 [–ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç]: {a[6] + a[7] +a [8]}\n'
                                                     f'7 [–≤–∏–¥–æ—Å]: {a[7] +a [8]}\n</b>'
                                                     f'8 [—Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–ª–æ] {a[8]}')
    await bot.answer_callback_query(call.id)




@dp.callback_query_handler(text='baza')
async def baza(call: types.callback_query):
    if call.message.chat.id in ADMIN_ID:
        a = open('server.db','rb')
        await bot.send_document(chat_id=call.message.chat.id, document=a)
    await bot.answer_callback_query(call.id)

########################  –†–∞—Å—Å—ã–ª–∫–∞  ################################
@dp.callback_query_handler(text='write_message')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def check(call: types.callback_query, state: FSMContext):
    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–í—Å–µ–π –±–∞–∑–µ', callback_data='rasl_old')
    bat1 = types.InlineKeyboardButton(text='–î–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞', callback_data='rasl_all')
    bat2 = types.InlineKeyboardButton(text='–ù–µ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞', callback_data='rasl_finish')
    murkap.add(bat0)
    murkap.add(bat1)
    murkap.add(bat2)


    bat11 = types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ 1 —ç—Ç–∞–ø—É', callback_data='rasl_11')
    bat22 = types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ 2 —ç—Ç–∞–ø—É', callback_data='rasl_22')
    bat33 = types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ 3 —ç—Ç–∞–ø—É', callback_data='rasl_33')
    bat44 = types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ 4 —ç—Ç–∞–ø—É', callback_data='rasl_44')
    bat55 = types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ 5 —ç—Ç–∞–ø—É', callback_data='rasl_55')
    bat66 = types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ 6 —ç—Ç–∞–ø—É', callback_data='rasl_66')
    bat77 = types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ 7 —ç—Ç–∞–ø—É', callback_data='rasl_77')
    bat88 = types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ 8 —ç—Ç–∞–ø—É', callback_data='rasl_88')

    murkap.add(bat11)
    murkap.add(bat22)
    murkap.add(bat33)
    murkap.add(bat44)
    murkap.add(bat55)
    murkap.add(bat66)
    murkap.add(bat77)
    murkap.add(bat88)



    await bot.send_message(call.message.chat.id, '–ö–æ–º—É –¥–µ–ª–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É?', reply_markup = murkap)
    await bot.answer_callback_query(call.id)



@dp.callback_query_handler(text_startswith='rasl_')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def check(call: types.callback_query, state: FSMContext):
    if call.data == 'rasl_old':
        await state.update_data(rasl = 'rasl_old')
    elif call.data == 'rasl_all':
        await state.update_data(rasl = 'rasl_all')
    elif call.data[0:11] == 'rasl_groop_':
        await state.update_data(rasl = call.data[11:])
    elif call.data == 'rasl_finish':
        await state.update_data(rasl='rasl_finish')
    else:
        await state.update_data(rasl = call.data[5:])



    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    murkap.add(bat0)
    await bot.send_message(call.message.chat.id, '–ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –∏ —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º',
                           reply_markup=murkap)
    await st_reg.step_q.set()
    await bot.answer_callback_query(call.id)


@dp.callback_query_handler(text='otemena', state='*')
async def otmena_12(call: types.callback_query, state: FSMContext):
    await bot.send_message(call.message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ')
    await state.finish()
    await bot.answer_callback_query(call.id)


@dp.message_handler(state=st_reg.step_q,content_types=['text', 'photo', 'video', 'video_note', 'voice'])  # –ü—Ä–µ–¥–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
async def redarkt_post(message: types.Message, state: FSMContext):
    await st_reg.st_name.set()
    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    bat1 = types.InlineKeyboardButton(text='–†–ê–ó–û–°–õ–ê–¢–¨', callback_data='send_ras')
    bat2 = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏', callback_data='add_but')
    murkap.add(bat1)
    murkap.add(bat2)
    murkap.add(bat0)

    await message.copy_to(chat_id=message.chat.id)
    q = message
    await state.update_data(q=q)

    await bot.send_message(chat_id=message.chat.id, text='–ü–æ—Å—Ç —Å–µ–π—á–∞—Å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ üëÜ', reply_markup=murkap)


# –ù–ê–°–¢–†–û–ô–ö–ê –ö–ù–û–ü–û–ö
@dp.callback_query_handler(text='add_but', state=st_reg.st_name)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
async def addbutton(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await bot.send_message(call.message.chat.id, text='–û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É Controller Bot')
    await st_reg.step_regbutton.set()
    await bot.answer_callback_query(call.id)


@dp.message_handler(state=st_reg.step_regbutton, content_types=['text'])  # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –≤ –Ω–µ—Ñ–æ—Ä–º–∞—Ç–µ
async def redarkt_button(message: types.Message, state: FSMContext):
    arr3 = message.text.split('\n')
    murkap = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏

    massiv_text = []
    massiv_url = []

    for but in arr3:
        new_but = but.split('-')
        massiv_text.append(new_but[0][:-1])
        massiv_url.append(new_but[1][1:])
        bat9 = types.InlineKeyboardButton(text=new_but[0][:-1], url=new_but[1][1:])
        murkap.add(bat9)

    try:
        data = await state.get_data()
        mess = data['q']  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

        await bot.copy_message(chat_id=message.chat.id, from_chat_id=message.chat.id, message_id=mess.message_id,
                               reply_markup=murkap)

        await state.update_data(text_but=massiv_text)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–µ—Ç–∞
        await state.update_data(url_but=massiv_url)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–µ—Ç–∞

        murkap2 = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –º–µ–Ω—é
        bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
        bat1 = types.InlineKeyboardButton(text='–†–ê–ó–û–°–õ–ê–¢–¨', callback_data='send_ras')
        murkap2.add(bat1)
        murkap2.add(bat0)

        await bot.send_message(chat_id=message.chat.id, text='–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø–æ—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫‚òù', reply_markup=murkap2)


    except:
        await bot.send_message(chat_id=message.chat.id, text='–û—à–∏–±–∫–∞. –û—Ç–º–µ–Ω–µ–Ω–æ')
        await state.finish()


# –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ô–ö–ò –ö–ù–û–ü–û–ö


@dp.callback_query_handler(text='send_ras', state="*")  # –†–∞—Å—Å—ã–ª–∫–∞
async def fname_step(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    data = await state.get_data()
    mess = data['q']  # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    rasl = data['rasl']  # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

    murkap = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:  # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç—É –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤—É –ø—É—Å—Ç–æ–π
        text_massiv = data['text_but']
        url_massiv = data['url_but']
        for t in text_massiv:
            for u in url_massiv:
                bat = types.InlineKeyboardButton(text=t, url=u)
                murkap.add(bat)
                break

    except:
        pass

    if rasl == 'rasl_old':
        db = sqlite3.connect('server.db') #–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Å–µ–π –±–∞–∑–µ
        sql = db.cursor()
        users = sql.execute("SELECT id FROM user_time").fetchall()

    elif rasl == 'rasl_all':
        db = sqlite3.connect('server.db')  # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Ç–µ–º –∫—Ç–æ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≥—Ä–µ–≤
        sql = db.cursor()
        users = sql.execute("SELECT id FROM user_time WHERE finish_stat = '1'").fetchall()

    elif rasl == 'rasl_finish':
        db = sqlite3.connect('server.db')  # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Ç–µ–º –∫—Ç–æ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≥—Ä–µ–≤
        sql = db.cursor()
        users = sql.execute("SELECT id FROM user_time WHERE finish_stat != '1'").fetchall()
    else:
        db = sqlite3.connect('server.db')  # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Ç–µ–º –∫—Ç–æ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≥—Ä–µ–≤
        sql = db.cursor()
        print(rasl)
        users = sql.execute(f"SELECT id FROM user_time WHERE finish_stat == {rasl}").fetchall()



    await state.finish()
    bad = 0
    good = 0
    delit = 0
    await bot.send_message(call.message.chat.id,
                           f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(users)}</code></b>\n\n<b>–†–∞—Å—Å–ª—ã–∫–∞ –Ω–∞—á–∞—Ç–∞!</b>",
                           parse_mode="html")

    for i in users:
        await asyncio.sleep(0.03)
        try:
            await mess.copy_to(i[0], reply_markup=murkap)
            good += 1
        except (BotBlocked, ChatNotFound):
            try:
                #delite_user(i[0])
                delit += 1

            except:
                pass
        except:
            bad += 1


    await bot.send_message(
        call.message.chat.id,
        "<u>–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n\n</u>"
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{len(users)}</code>\n"
        f"<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> <code>{good}</code>\n"
        f"<b>–£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{delit}</code>\n"
        f"<b>–ü—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–æ–∫:</b> <code>{bad}</code>",
        parse_mode="html"
    )
    await bot.answer_callback_query(call.id)
#########################################################